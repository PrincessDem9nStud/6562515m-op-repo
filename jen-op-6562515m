pipeline {
      agent any
	  tools {
		git 'Default'
		}
	  stages {
          stage('Op-6562515m-S1') {
          steps {
                 sh '''#!/bin/bash

				# Define variables for part 1 of S1
				image_name="qa_bkup_image"
				container_name="6562515m-qa-svr"
							 
				#clean and recreate docker images
				if docker images | grep -q "$image_name"; then
					puppet resource docker_image "$image_name" ensure=absent force=true;
					echo "remove existing image";
				else 
					puppet resource docker_image "$image_name" ensure=present;
					echo "create new image";
				fi

				#clean and recreate directory
                 puppet resource file /tmp/operate ensure=absent force=true;
                 puppet resource file /tmp/operate ensure=directory;
				
				#clone repo
	             cd /tmp/operate;
	             git clone https://github.com/PrincessDem9nStud/6562515m-op-repo.git;
                 
				#define variable for part 2 of S1
				 targets=6562515m-qa-svr.localdomain;
                 locate_script='/tmp/operate/6562515m-op-repo/6562515m_script';

				#run Bolt script to update new index.html
                 bolt script run $locate_script -t $targets -u svradm -p user123 --no-host-key-check --run-as root
				'''
				echo "Op-6562515m-S1: QA web server is backup and updated"
          }
          }
		 stage('Op-6562515m-S2') {
          steps {
			script {
				sh 'curl -Is http://localhost:33200 | head -n 1 > /tmp/operate/results-01';
				echo "Op-6562515m-S2: Checking on whether QA server is running after update"
			  }
          }
          }
          stage('Op-6562515m-S3') {
          steps {
			script { 
			   def targets = '6562515m-qa-svr.localdomain'
			   def locate_scriptR = '/tmp/operate/6562515m-op-repo/script_rollback'
			   def result = sh(script: 'cat /tmp/operate/results-01', returnStdout: true).trim()
				def v1 = input(
        		message: 'Proceed with rollout to Prod server or Roll back QA server?',
        		parameters: [choice(name:' ', choices: ['Rollout to Prod Server', 'Rollback to QA Server'])]			
    				)		 		
					if ((result == 'HTTP/1.1 200 OK') && (v1 == 'Rollout to Prod Server')) {
						echo "Op-6562515m-S3: proceed to roll out to prod server"
					} else if (v1 == 'Rollback to QA Server') {
					sh 'bolt script run ${locate_scriptR} -t ${targets} -u svradm -p user123 --no-host-key-check --run-as root'
						echo "Op-6562515m-S3: QA server fails after update and is rolled back"
						error("Aborting")
					}			
          }
		  }
		  }
		  stage('Op-6562515m-S4') {
          steps {
                 sh '''#!/bin/bash

				# Define variables for part 1 of S4
				image_name="prod_bkup_image"
				container_name="6562515m-prod-svr"
							 
				#clean and recreate docker images
				if docker images | grep -q "$image_name"; then
					puppet resource docker_image "$image_name" ensure=absent force=true;
					echo "remove existing image";
				else 
					puppet resource docker_image "$image_name" ensure=present;
					echo "create new image";
				fi
               
				#define variables for part 2 of S4
				 targets=6562515m-prod-svr.localdomain;
                 locate_script='/tmp/operate/6562515m-op-repo/6562515m_script';

				#run Bolt script
                 bolt script run $locate_script -t $targets -u svradm -p user123 --no-host-key-check --run-as root
				'''
				echo "Op-6562515m-S4:PROD web server is backup and updated"
          }
          }
		  stage('Op-6562515m-S5') {
          steps {
			script {
            	sh 'curl -Is http://localhost:33500 | head -n 1 > /tmp/operate/results-02';
				echo "Op-6562515m-S5: Checking on whether Prod server is running after update"
			  }
          }
          }
		  stage('Op-6562515m-S6') {
          steps {
			script { 
			def targets = '6562515m-prod-svr.localdomain'
			def locate_scriptR = '/tmp/operate/6562515m-op-repo/script_rollback'
			def result = sh(script: 'cat /tmp/operate/results-02', returnStdout: true).trim()
				def v2 = input(
        		message: 'Proceed to release to Prod web server to production or Roll back to Prod web server?',
        		parameters: [choice(name:' ', choices: ['Release Prod Web', 'Rollback Prod Web'])]			
    				)		 		
					if ((result == 'HTTP/1.1 200 OK') && (v2 == 'Release Prod Web')) {
						echo "Op-6562515m-S6: proceed to release Prod web server to production"
					} else if (v2 == 'Rollback Prod Web') {
					sh 'bolt script run ${locate_scriptR} -t ${targets} -u svradm -p user123 --no-host-key-check --run-as root'
						echo "Op-6562515m-S6: Roll back Prod web server"
						error("Aborting")
					}			
          }
		  }
		  }
		  stage('Op-6562515m-S7') {
          steps {
            echo 'Op-6562515m-S7: Prod web server is monitored and ready to serve'
          }
          }
      }
}
